"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.withLogger = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _winstonEnricher = _interopRequireDefault(require("@newrelic/winston-enricher"));

var _winston = _interopRequireDefault(require("winston"));

var _correlationMiddleware = require("./correlation-middleware");

var _LogDeliveryAgent = require("./LogDeliveryAgent");

var _ref2, _process$env$LOG_LEVE;

// Queue for logs prior to logger creation
var logStyles = ['STRING_COLOR', 'STRING', 'JSON', 'SILENT', 'NEW_RELIC'];
var defaultLogStyle = logStyles[0];

var stdoutFormat = _winston["default"].format.printf(function (_ref) {
  var level = _ref.level,
      message = _ref.message,
      label = _ref.label,
      timestamp = _ref.timestamp;
  return "".concat(timestamp, " [").concat(label, "] ").concat(level, ": ").concat(message);
});

var correlationIdFormat = _winston["default"].format(function (info) {
  info.correlationId = (0, _correlationMiddleware.withCorrelation)();
  return info;
});

var getNewRelicLogTransport = function getNewRelicLogTransport() {
  var _NewRelicLogDeliveryA;

  messages.push(['silly', 'Attempting retrieval of NewRelicLogDeliveryAgent instance']);

  var instance = _LogDeliveryAgent.NewRelicLogDeliveryAgent.getInstance();

  if (instance) {
    return instance.getLogTransport();
  }

  messages.push(['debug', 'No NewRelicLogDeliveryAgent defined, initializing instance']);
  var transport = (_NewRelicLogDeliveryA = _LogDeliveryAgent.NewRelicLogDeliveryAgent.initialize()) === null || _NewRelicLogDeliveryA === void 0 ? void 0 : _NewRelicLogDeliveryA.getLogTransport();
  transport === null || transport === void 0 ? void 0 : transport.setMaxListeners(Infinity);
  messages.push(['silly', "Transport created"]);
  return transport;
};

var getLogStyleOption = function getLogStyleOption() {
  if (!process.env.LOG_STYLE) {
    return [defaultLogStyle, "Using default log style: ".concat(defaultLogStyle, ". Override this using the LOG_STYLE environment variable. Valid values are: ").concat(logStyles, ".")];
  }

  if (logStyles.includes(process.env.LOG_STYLE.toUpperCase().trim())) {
    return [process.env.LOG_STYLE, "Using log style: ".concat(process.env.LOG_STYLE)];
  }

  return [defaultLogStyle, "Unrecognized log style: ".concat(process.env.LOG_STYLE, ". Using default log style: ").concat(defaultLogStyle, ". Valid log styles are: ").concat(logStyles)];
};

var defaultLoggingLevel = (_ref2 = (_process$env$LOG_LEVE = process.env.LOG_LEVEL) !== null && _process$env$LOG_LEVE !== void 0 ? _process$env$LOG_LEVE : process.env.LEVEL) !== null && _ref2 !== void 0 ? _ref2 : 'debug';
var messages = [];

var _getLogStyleOption = getLogStyleOption(),
    _getLogStyleOption2 = (0, _slicedToArray2["default"])(_getLogStyleOption, 2),
    logStyle = _getLogStyleOption2[0],
    message = _getLogStyleOption2[1];

messages.push(['info', message]);

var withLogger = function withLogger(label, level) {
  switch (logStyle) {
    case 'JSON':
      return createJsonLogger(label, level);

    case 'STRING':
      return createStringLogger(label, level);

    case 'STRING_COLOR':
      return createColorStringLogger(label, level);

    case 'SILENT':
      return createSilentLogger(label, level);

    case 'NEW_RELIC':
      return createNewRelicLogger(label, level);
  }
};

exports.withLogger = withLogger;

var createNewRelicLogger = function createNewRelicLogger(label, level) {
  var _winston$format;

  if (!process.env.NEW_RELIC_LICENSE_KEY) {
    messages.push(['warn', 'NEW_RELIC logging style configured but NEW_RELIC_LICENSE_KEY is not defined! Falling back to JSON logger.']);
    return createJsonLogger(label, level);
  }

  return _winston["default"].loggers.add(label, {
    level: level !== null && level !== void 0 ? level : defaultLoggingLevel,
    format: (_winston$format = _winston["default"].format).combine.apply(_winston$format, (0, _toConsumableArray2["default"])(defaultLoggers(label)).concat([(0, _winstonEnricher["default"])()])),
    transports: [getNewRelicLogTransport()]
  });
};

var createJsonLogger = function createJsonLogger(label, level) {
  var _winston$format2;

  return _winston["default"].loggers.add(label, {
    level: level !== null && level !== void 0 ? level : defaultLoggingLevel,
    format: (_winston$format2 = _winston["default"].format).combine.apply(_winston$format2, (0, _toConsumableArray2["default"])(defaultLoggers(label)).concat([(0, _winstonEnricher["default"])()])),
    transports: [new _winston["default"].transports.Console()]
  });
};

var createStringLogger = function createStringLogger(label, level) {
  var _winston$format3;

  return _winston["default"].loggers.add(label, {
    level: level !== null && level !== void 0 ? level : defaultLoggingLevel,
    format: (_winston$format3 = _winston["default"].format).combine.apply(_winston$format3, (0, _toConsumableArray2["default"])(defaultLoggers(label)).concat([stdoutFormat])),
    transports: [new _winston["default"].transports.Console()]
  });
};

var createColorStringLogger = function createColorStringLogger(label, level) {
  var _winston$format4;

  return _winston["default"].loggers.add(label, {
    level: level !== null && level !== void 0 ? level : defaultLoggingLevel,
    format: (_winston$format4 = _winston["default"].format).combine.apply(_winston$format4, (0, _toConsumableArray2["default"])(defaultLoggers(label)).concat([_winston["default"].format.colorize(), stdoutFormat])),
    transports: [new _winston["default"].transports.Console()]
  });
};

var createSilentLogger = function createSilentLogger(label, level) {
  return _winston["default"].loggers.add(label, {
    silent: true,
    level: level !== null && level !== void 0 ? level : defaultLoggingLevel,
    transports: [new _winston["default"].transports.Console()]
  });
};

var defaultLoggers = function defaultLoggers(label) {
  return [correlationIdFormat(), _winston["default"].format.label({
    label: label
  }), _winston["default"].format.timestamp(), _winston["default"].format.splat()];
};

var log = withLogger('logger');
messages.push(['debug', 'Internal logger initialized']);

while (messages.length > 0) {
  var _ref3 = messages.shift(),
      _ref4 = (0, _slicedToArray2["default"])(_ref3, 2),
      level = _ref4[0],
      _message = _ref4[1];

  log[level](_message);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,