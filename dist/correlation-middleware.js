"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DEFAULT_CORRELATION_HEADER = void 0;
exports.correlationMiddleware = correlationMiddleware;
exports.withCorrelation = withCorrelation;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _uuid = require("uuid");

var _async_hooks = require("async_hooks");

var _http = _interopRequireDefault(require("http"));

var _https = _interopRequireDefault(require("https"));

var DEFAULT_CORRELATION_HEADER = 'x-correlation-id';
exports.DEFAULT_CORRELATION_HEADER = DEFAULT_CORRELATION_HEADER;
var localStorage = new _async_hooks.AsyncLocalStorage();
/**
 * Creates a middleware function to extract a correlation ID from an incoming request or to create
 * a correlation ID if no such ID exists
 * 
 * @param header -  
 * @returns 
 */

function correlationMiddleware() {
  var header = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_CORRELATION_HEADER;
  return function (request, response, next) {
    var correlationId = request.headers[header] || generateCorrelationId();
    response.setHeader(header, correlationId);
    localStorage.run(correlationId, /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
      return _regenerator["default"].wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              next();

            case 1:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    })));
  };
}

var generateCorrelationId = function generateCorrelationId() {
  return (0, _uuid.v4)();
};

function withCorrelation() {
  return localStorage.getStore();
}
/**
 * Adds hooks to http/https modules to automatically attach a correlation
 * ID to outgoing requests
 */


function attachCorrelationIDHook(module) {
  var actualCall = module.request;

  function request(url, options, callback) {
    // Logic around painful overloading
    var actualUrl;
    var actualOptions;
    var actualCallback;
    ;

    if (url instanceof URL || typeof url === 'string') {
      actualUrl = url;
      actualOptions = options;
      actualCallback = callback;
    } else {
      actualOptions = url;
      actualCallback = options;
    } // Get correlation ID


    var correlationId = withCorrelation(); // Case: Headers object is present but no correlationID provided

    if (actualOptions.headers && !actualOptions.headers[DEFAULT_CORRELATION_HEADER]) {
      actualOptions.headers[DEFAULT_CORRELATION_HEADER] = correlationId;
    } // Case: Headers option was not passed, add both headers option and correlationID


    if (!actualOptions.headers) {
      actualOptions.headers = {};
      actualOptions.headers[DEFAULT_CORRELATION_HEADER] = correlationId;
    } // Delegate to wrapped request call


    return actualCall(actualOptions, actualCallback);
  }

  module.request = request;
}

attachCorrelationIDHook(_http["default"]);
attachCorrelationIDHook(_https["default"]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jb3JyZWxhdGlvbi1taWRkbGV3YXJlLnRzIl0sIm5hbWVzIjpbIkRFRkFVTFRfQ09SUkVMQVRJT05fSEVBREVSIiwibG9jYWxTdG9yYWdlIiwiQXN5bmNMb2NhbFN0b3JhZ2UiLCJjb3JyZWxhdGlvbk1pZGRsZXdhcmUiLCJoZWFkZXIiLCJyZXF1ZXN0IiwicmVzcG9uc2UiLCJuZXh0IiwiY29ycmVsYXRpb25JZCIsImhlYWRlcnMiLCJnZW5lcmF0ZUNvcnJlbGF0aW9uSWQiLCJzZXRIZWFkZXIiLCJydW4iLCJ3aXRoQ29ycmVsYXRpb24iLCJnZXRTdG9yZSIsImF0dGFjaENvcnJlbGF0aW9uSURIb29rIiwibW9kdWxlIiwiYWN0dWFsQ2FsbCIsInVybCIsIm9wdGlvbnMiLCJjYWxsYmFjayIsImFjdHVhbFVybCIsImFjdHVhbE9wdGlvbnMiLCJhY3R1YWxDYWxsYmFjayIsIlVSTCIsImh0dHAiLCJodHRwcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBRU8sSUFBTUEsMEJBQTBCLEdBQUcsa0JBQW5DOztBQUVQLElBQU1DLFlBQVksR0FBRyxJQUFJQyw4QkFBSixFQUFyQjtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNPLFNBQVNDLHFCQUFULEdBQW9FO0FBQUEsTUFBckNDLE1BQXFDLHVFQUE1QkosMEJBQTRCO0FBQ3ZFLFNBQU8sVUFBQ0ssT0FBRCxFQUFtQkMsUUFBbkIsRUFBdUNDLElBQXZDLEVBQThEO0FBQ2pFLFFBQUlDLGFBQWEsR0FBR0gsT0FBTyxDQUFDSSxPQUFSLENBQWdCTCxNQUFoQixLQUFxQ00scUJBQXFCLEVBQTlFO0FBQ0FKLElBQUFBLFFBQVEsQ0FBQ0ssU0FBVCxDQUFtQlAsTUFBbkIsRUFBMkJJLGFBQTNCO0FBQ0FQLElBQUFBLFlBQVksQ0FBQ1csR0FBYixDQUFpQkosYUFBakIsNkZBQWdDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDNUJELGNBQUFBLElBQUk7O0FBRHdCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEtBQWhDO0FBR0gsR0FORDtBQU9IOztBQUVELElBQU1HLHFCQUFxQixHQUFHLFNBQXhCQSxxQkFBd0I7QUFBQSxTQUFNLGVBQU47QUFBQSxDQUE5Qjs7QUFFTyxTQUFTRyxlQUFULEdBQTJCO0FBQzlCLFNBQU9aLFlBQVksQ0FBQ2EsUUFBYixFQUFQO0FBQ0g7QUFFRDtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EsU0FBU0MsdUJBQVQsQ0FBaUNDLE1BQWpDLEVBQXFFO0FBQ2pFLE1BQUlDLFVBQVUsR0FBR0QsTUFBTSxDQUFDWCxPQUF4Qjs7QUFJQSxXQUFTQSxPQUFULENBQ0lhLEdBREosRUFFSUMsT0FGSixFQUdJQyxRQUhKLEVBSUU7QUFDRTtBQUNBLFFBQUlDLFNBQUo7QUFDQSxRQUFJQyxhQUFKO0FBQ0EsUUFBSUMsY0FBSjtBQUFzRTs7QUFFdEUsUUFBSUwsR0FBRyxZQUFZTSxHQUFmLElBQXNCLE9BQU9OLEdBQVAsS0FBZSxRQUF6QyxFQUFtRDtBQUMvQ0csTUFBQUEsU0FBUyxHQUFHSCxHQUFaO0FBQ0FJLE1BQUFBLGFBQWEsR0FBR0gsT0FBaEI7QUFDQUksTUFBQUEsY0FBYyxHQUFHSCxRQUFqQjtBQUNILEtBSkQsTUFJTztBQUNIRSxNQUFBQSxhQUFhLEdBQUdKLEdBQWhCO0FBQ0FLLE1BQUFBLGNBQWMsR0FBR0osT0FBakI7QUFDSCxLQWJILENBZUU7OztBQUNBLFFBQU1YLGFBQWEsR0FBR0ssZUFBZSxFQUFyQyxDQWhCRixDQWtCRTs7QUFDQSxRQUFJUyxhQUFhLENBQUNiLE9BQWQsSUFBeUIsQ0FBQ2EsYUFBYSxDQUFDYixPQUFkLENBQXNCVCwwQkFBdEIsQ0FBOUIsRUFBaUY7QUFDN0VzQixNQUFBQSxhQUFhLENBQUNiLE9BQWQsQ0FBc0JULDBCQUF0QixJQUFvRFEsYUFBcEQ7QUFDSCxLQXJCSCxDQXVCRTs7O0FBQ0EsUUFBSSxDQUFDYyxhQUFhLENBQUNiLE9BQW5CLEVBQTRCO0FBQ3hCYSxNQUFBQSxhQUFhLENBQUNiLE9BQWQsR0FBd0IsRUFBeEI7QUFDQWEsTUFBQUEsYUFBYSxDQUFDYixPQUFkLENBQXNCVCwwQkFBdEIsSUFBb0RRLGFBQXBEO0FBQ0gsS0EzQkgsQ0E2QkU7OztBQUNBLFdBQU9TLFVBQVUsQ0FBQ0ssYUFBRCxFQUFnQkMsY0FBaEIsQ0FBakI7QUFDSDs7QUFDRFAsRUFBQUEsTUFBTSxDQUFDWCxPQUFQLEdBQWlCQSxPQUFqQjtBQUNIOztBQUVEVSx1QkFBdUIsQ0FBQ1UsZ0JBQUQsQ0FBdkI7QUFDQVYsdUJBQXVCLENBQUNXLGlCQUFELENBQXZCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmV4dEZ1bmN0aW9uLCBSZXF1ZXN0LCBSZXNwb25zZSB9IGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IHsgdjQgYXMgdXVpZHY0IH0gZnJvbSAndXVpZCc7XG5pbXBvcnQgeyBBc3luY0xvY2FsU3RvcmFnZSB9IGZyb20gJ2FzeW5jX2hvb2tzJztcbmltcG9ydCBodHRwLCB7IEluY29taW5nTWVzc2FnZSB9IGZyb20gJ2h0dHAnO1xuaW1wb3J0IGh0dHBzLCB7IFJlcXVlc3RPcHRpb25zIH0gZnJvbSAnaHR0cHMnO1xuXG5leHBvcnQgY29uc3QgREVGQVVMVF9DT1JSRUxBVElPTl9IRUFERVIgPSAneC1jb3JyZWxhdGlvbi1pZCdcblxuY29uc3QgbG9jYWxTdG9yYWdlID0gbmV3IEFzeW5jTG9jYWxTdG9yYWdlPHN0cmluZz4oKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbWlkZGxld2FyZSBmdW5jdGlvbiB0byBleHRyYWN0IGEgY29ycmVsYXRpb24gSUQgZnJvbSBhbiBpbmNvbWluZyByZXF1ZXN0IG9yIHRvIGNyZWF0ZVxuICogYSBjb3JyZWxhdGlvbiBJRCBpZiBubyBzdWNoIElEIGV4aXN0c1xuICogXG4gKiBAcGFyYW0gaGVhZGVyIC0gIFxuICogQHJldHVybnMgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb3JyZWxhdGlvbk1pZGRsZXdhcmUoaGVhZGVyID0gREVGQVVMVF9DT1JSRUxBVElPTl9IRUFERVIpIHtcbiAgICByZXR1cm4gKHJlcXVlc3Q6IFJlcXVlc3QsIHJlc3BvbnNlOiBSZXNwb25zZSwgbmV4dDogTmV4dEZ1bmN0aW9uKSA9PiB7XG4gICAgICAgIGxldCBjb3JyZWxhdGlvbklkID0gcmVxdWVzdC5oZWFkZXJzW2hlYWRlcl0gYXMgc3RyaW5nIHx8IGdlbmVyYXRlQ29ycmVsYXRpb25JZCgpO1xuICAgICAgICByZXNwb25zZS5zZXRIZWFkZXIoaGVhZGVyLCBjb3JyZWxhdGlvbklkKTtcbiAgICAgICAgbG9jYWxTdG9yYWdlLnJ1bihjb3JyZWxhdGlvbklkLCBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBuZXh0KCk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuY29uc3QgZ2VuZXJhdGVDb3JyZWxhdGlvbklkID0gKCkgPT4gdXVpZHY0KCk7XG5cbmV4cG9ydCBmdW5jdGlvbiB3aXRoQ29ycmVsYXRpb24oKSB7XG4gICAgcmV0dXJuIGxvY2FsU3RvcmFnZS5nZXRTdG9yZSgpO1xufVxuXG4vKipcbiAqIEFkZHMgaG9va3MgdG8gaHR0cC9odHRwcyBtb2R1bGVzIHRvIGF1dG9tYXRpY2FsbHkgYXR0YWNoIGEgY29ycmVsYXRpb25cbiAqIElEIHRvIG91dGdvaW5nIHJlcXVlc3RzXG4gKi9cbmZ1bmN0aW9uIGF0dGFjaENvcnJlbGF0aW9uSURIb29rKG1vZHVsZTogdHlwZW9mIGh0dHAgfCB0eXBlb2YgaHR0cHMpIHtcbiAgICBsZXQgYWN0dWFsQ2FsbCA9IG1vZHVsZS5yZXF1ZXN0O1xuXG4gICAgZnVuY3Rpb24gcmVxdWVzdChvcHRpb25zOiBSZXF1ZXN0T3B0aW9ucyB8IHN0cmluZyB8IFVSTCwgY2FsbGJhY2s/OiAocmVzOiBodHRwLkluY29taW5nTWVzc2FnZSkgPT4gdm9pZCk6IGh0dHAuQ2xpZW50UmVxdWVzdDtcbiAgICBmdW5jdGlvbiByZXF1ZXN0KHVybDogc3RyaW5nIHwgVVJMLCBvcHRpb25zOiBSZXF1ZXN0T3B0aW9ucywgY2FsbGJhY2s/OiAocmVzOiBodHRwLkluY29taW5nTWVzc2FnZSkgPT4gdm9pZCk6IGh0dHAuQ2xpZW50UmVxdWVzdDtcbiAgICBmdW5jdGlvbiByZXF1ZXN0KFxuICAgICAgICB1cmw6IHN0cmluZyB8IFVSTCB8IFJlcXVlc3RPcHRpb25zLCBcbiAgICAgICAgb3B0aW9uczogUmVxdWVzdE9wdGlvbnMgfCAoKHJlczogaHR0cC5JbmNvbWluZ01lc3NhZ2UpID0+IHZvaWQpIHwgdW5kZWZpbmVkLFxuICAgICAgICBjYWxsYmFjaz86IChyZXM6IGh0dHAuSW5jb21pbmdNZXNzYWdlKSA9PiB2b2lkIHwgdW5kZWZpbmVkXG4gICAgKSB7XG4gICAgICAgIC8vIExvZ2ljIGFyb3VuZCBwYWluZnVsIG92ZXJsb2FkaW5nXG4gICAgICAgIGxldCBhY3R1YWxVcmw6IHN0cmluZyB8IFVSTDtcbiAgICAgICAgbGV0IGFjdHVhbE9wdGlvbnM6IFJlcXVlc3RPcHRpb25zO1xuICAgICAgICBsZXQgYWN0dWFsQ2FsbGJhY2s6ICgocmVzOiBodHRwLkluY29taW5nTWVzc2FnZSkgPT4gdm9pZCkgfCB1bmRlZmluZWQ7O1xuICAgICAgICBcbiAgICAgICAgaWYgKHVybCBpbnN0YW5jZW9mIFVSTCB8fCB0eXBlb2YgdXJsID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgYWN0dWFsVXJsID0gdXJsO1xuICAgICAgICAgICAgYWN0dWFsT3B0aW9ucyA9IG9wdGlvbnMgYXMgUmVxdWVzdE9wdGlvbnM7XG4gICAgICAgICAgICBhY3R1YWxDYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYWN0dWFsT3B0aW9ucyA9IHVybDtcbiAgICAgICAgICAgIGFjdHVhbENhbGxiYWNrID0gb3B0aW9ucyBhcyAocmVzOiBodHRwLkluY29taW5nTWVzc2FnZSkgPT4gdm9pZDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEdldCBjb3JyZWxhdGlvbiBJRFxuICAgICAgICBjb25zdCBjb3JyZWxhdGlvbklkID0gd2l0aENvcnJlbGF0aW9uKCk7XG5cbiAgICAgICAgLy8gQ2FzZTogSGVhZGVycyBvYmplY3QgaXMgcHJlc2VudCBidXQgbm8gY29ycmVsYXRpb25JRCBwcm92aWRlZFxuICAgICAgICBpZiAoYWN0dWFsT3B0aW9ucy5oZWFkZXJzICYmICFhY3R1YWxPcHRpb25zLmhlYWRlcnNbREVGQVVMVF9DT1JSRUxBVElPTl9IRUFERVJdKSB7XG4gICAgICAgICAgICBhY3R1YWxPcHRpb25zLmhlYWRlcnNbREVGQVVMVF9DT1JSRUxBVElPTl9IRUFERVJdID0gY29ycmVsYXRpb25JZDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENhc2U6IEhlYWRlcnMgb3B0aW9uIHdhcyBub3QgcGFzc2VkLCBhZGQgYm90aCBoZWFkZXJzIG9wdGlvbiBhbmQgY29ycmVsYXRpb25JRFxuICAgICAgICBpZiAoIWFjdHVhbE9wdGlvbnMuaGVhZGVycykge1xuICAgICAgICAgICAgYWN0dWFsT3B0aW9ucy5oZWFkZXJzID0ge307XG4gICAgICAgICAgICBhY3R1YWxPcHRpb25zLmhlYWRlcnNbREVGQVVMVF9DT1JSRUxBVElPTl9IRUFERVJdID0gY29ycmVsYXRpb25JZDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIERlbGVnYXRlIHRvIHdyYXBwZWQgcmVxdWVzdCBjYWxsXG4gICAgICAgIHJldHVybiBhY3R1YWxDYWxsKGFjdHVhbE9wdGlvbnMsIGFjdHVhbENhbGxiYWNrKVxuICAgIH1cbiAgICBtb2R1bGUucmVxdWVzdCA9IHJlcXVlc3Q7XG59XG5cbmF0dGFjaENvcnJlbGF0aW9uSURIb29rKGh0dHApO1xuYXR0YWNoQ29ycmVsYXRpb25JREhvb2soaHR0cHMpOyJdfQ==