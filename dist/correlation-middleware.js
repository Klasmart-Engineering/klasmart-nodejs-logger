"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DEFAULT_CORRELATION_HEADER = void 0;
exports.correlationMiddleware = correlationMiddleware;
exports.withCorrelation = withCorrelation;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _uuid = require("uuid");

var _async_hooks = require("async_hooks");

var _http = _interopRequireDefault(require("http"));

var _https = _interopRequireDefault(require("https"));

var DEFAULT_CORRELATION_HEADER = 'x-correlation-id';
exports.DEFAULT_CORRELATION_HEADER = DEFAULT_CORRELATION_HEADER;
var localStorage = new _async_hooks.AsyncLocalStorage();
/**
 * Creates a middleware function to extract a correlation ID from an incoming request or to create
 * a correlation ID if no such ID exists
 * 
 * @param header -  
 * @returns 
 */

function correlationMiddleware() {
  var header = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_CORRELATION_HEADER;
  return function (request, response, next) {
    var correlationId = request.headers[header] || generateCorrelationId();
    response.setHeader(header, correlationId);
    localStorage.run(correlationId, /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
      return _regenerator["default"].wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              next();

            case 1:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    })));
  };
}

var generateCorrelationId = function generateCorrelationId() {
  return (0, _uuid.v4)();
};

function withCorrelation() {
  return localStorage.getStore();
}
/**
 * Adds hooks to http/https modules to automatically attach a correlation
 * ID to outgoing requests
 */


function attachCorrelationIDHook(module) {
  var actualCall = module.request;

  function request(url, options, callback) {
    // Logic around painful overloading
    var actualUrl;
    var actualOptions;
    var actualCallback;
    ;

    if (url instanceof URL || typeof url === 'string') {
      actualUrl = url;
      actualOptions = options;
      actualCallback = callback;
    } else {
      actualOptions = url;
      actualCallback = options;
    } // Get correlation ID


    var correlationId = withCorrelation(); // Case: Headers object is present but no correlationID provided

    if (correlationId && actualOptions.headers && !actualOptions.headers[DEFAULT_CORRELATION_HEADER]) {
      actualOptions.headers[DEFAULT_CORRELATION_HEADER] = correlationId;
    } // Case: Headers option was not passed, add both headers option and correlationID


    if (correlationId && !actualOptions.headers) {
      actualOptions.headers = {};
      actualOptions.headers[DEFAULT_CORRELATION_HEADER] = correlationId;
    } // Delegate to wrapped request call


    return actualCall(actualOptions, actualCallback);
  }

  module.request = request;
}

attachCorrelationIDHook(_http["default"]);
attachCorrelationIDHook(_https["default"]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jb3JyZWxhdGlvbi1taWRkbGV3YXJlLnRzIl0sIm5hbWVzIjpbIkRFRkFVTFRfQ09SUkVMQVRJT05fSEVBREVSIiwibG9jYWxTdG9yYWdlIiwiQXN5bmNMb2NhbFN0b3JhZ2UiLCJjb3JyZWxhdGlvbk1pZGRsZXdhcmUiLCJoZWFkZXIiLCJyZXF1ZXN0IiwicmVzcG9uc2UiLCJuZXh0IiwiY29ycmVsYXRpb25JZCIsImhlYWRlcnMiLCJnZW5lcmF0ZUNvcnJlbGF0aW9uSWQiLCJzZXRIZWFkZXIiLCJydW4iLCJ3aXRoQ29ycmVsYXRpb24iLCJnZXRTdG9yZSIsImF0dGFjaENvcnJlbGF0aW9uSURIb29rIiwibW9kdWxlIiwiYWN0dWFsQ2FsbCIsInVybCIsIm9wdGlvbnMiLCJjYWxsYmFjayIsImFjdHVhbFVybCIsImFjdHVhbE9wdGlvbnMiLCJhY3R1YWxDYWxsYmFjayIsIlVSTCIsImh0dHAiLCJodHRwcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBRU8sSUFBTUEsMEJBQTBCLEdBQUcsa0JBQW5DOztBQUVQLElBQU1DLFlBQVksR0FBRyxJQUFJQyw4QkFBSixFQUFyQjtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNPLFNBQVNDLHFCQUFULEdBQW9FO0FBQUEsTUFBckNDLE1BQXFDLHVFQUE1QkosMEJBQTRCO0FBQ3ZFLFNBQU8sVUFBQ0ssT0FBRCxFQUFtQkMsUUFBbkIsRUFBdUNDLElBQXZDLEVBQThEO0FBQ2pFLFFBQUlDLGFBQWEsR0FBR0gsT0FBTyxDQUFDSSxPQUFSLENBQWdCTCxNQUFoQixLQUFxQ00scUJBQXFCLEVBQTlFO0FBQ0FKLElBQUFBLFFBQVEsQ0FBQ0ssU0FBVCxDQUFtQlAsTUFBbkIsRUFBMkJJLGFBQTNCO0FBQ0FQLElBQUFBLFlBQVksQ0FBQ1csR0FBYixDQUFpQkosYUFBakIsNkZBQWdDO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDNUJELGNBQUFBLElBQUk7O0FBRHdCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEtBQWhDO0FBR0gsR0FORDtBQU9IOztBQUVELElBQU1HLHFCQUFxQixHQUFHLFNBQXhCQSxxQkFBd0I7QUFBQSxTQUFNLGVBQU47QUFBQSxDQUE5Qjs7QUFFTyxTQUFTRyxlQUFULEdBQTJCO0FBQzlCLFNBQU9aLFlBQVksQ0FBQ2EsUUFBYixFQUFQO0FBQ0g7QUFFRDtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EsU0FBU0MsdUJBQVQsQ0FBaUNDLE1BQWpDLEVBQXFFO0FBQ2pFLE1BQUlDLFVBQVUsR0FBR0QsTUFBTSxDQUFDWCxPQUF4Qjs7QUFJQSxXQUFTQSxPQUFULENBQ0lhLEdBREosRUFFSUMsT0FGSixFQUdJQyxRQUhKLEVBSUU7QUFDRTtBQUNBLFFBQUlDLFNBQUo7QUFDQSxRQUFJQyxhQUFKO0FBQ0EsUUFBSUMsY0FBSjtBQUFzRTs7QUFFdEUsUUFBSUwsR0FBRyxZQUFZTSxHQUFmLElBQXNCLE9BQU9OLEdBQVAsS0FBZSxRQUF6QyxFQUFtRDtBQUMvQ0csTUFBQUEsU0FBUyxHQUFHSCxHQUFaO0FBQ0FJLE1BQUFBLGFBQWEsR0FBR0gsT0FBaEI7QUFDQUksTUFBQUEsY0FBYyxHQUFHSCxRQUFqQjtBQUNILEtBSkQsTUFJTztBQUNIRSxNQUFBQSxhQUFhLEdBQUdKLEdBQWhCO0FBQ0FLLE1BQUFBLGNBQWMsR0FBR0osT0FBakI7QUFDSCxLQWJILENBZUU7OztBQUNBLFFBQU1YLGFBQWEsR0FBR0ssZUFBZSxFQUFyQyxDQWhCRixDQWtCRTs7QUFDQSxRQUFJTCxhQUFhLElBQUljLGFBQWEsQ0FBQ2IsT0FBL0IsSUFBMEMsQ0FBQ2EsYUFBYSxDQUFDYixPQUFkLENBQXNCVCwwQkFBdEIsQ0FBL0MsRUFBa0c7QUFDOUZzQixNQUFBQSxhQUFhLENBQUNiLE9BQWQsQ0FBc0JULDBCQUF0QixJQUFvRFEsYUFBcEQ7QUFDSCxLQXJCSCxDQXVCRTs7O0FBQ0EsUUFBSUEsYUFBYSxJQUFJLENBQUNjLGFBQWEsQ0FBQ2IsT0FBcEMsRUFBNkM7QUFDekNhLE1BQUFBLGFBQWEsQ0FBQ2IsT0FBZCxHQUF3QixFQUF4QjtBQUNBYSxNQUFBQSxhQUFhLENBQUNiLE9BQWQsQ0FBc0JULDBCQUF0QixJQUFvRFEsYUFBcEQ7QUFDSCxLQTNCSCxDQTZCRTs7O0FBQ0EsV0FBT1MsVUFBVSxDQUFDSyxhQUFELEVBQWdCQyxjQUFoQixDQUFqQjtBQUNIOztBQUNEUCxFQUFBQSxNQUFNLENBQUNYLE9BQVAsR0FBaUJBLE9BQWpCO0FBQ0g7O0FBRURVLHVCQUF1QixDQUFDVSxnQkFBRCxDQUF2QjtBQUNBVix1QkFBdUIsQ0FBQ1csaUJBQUQsQ0FBdkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZXh0RnVuY3Rpb24sIFJlcXVlc3QsIFJlc3BvbnNlIH0gZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgeyB2NCBhcyB1dWlkdjQgfSBmcm9tICd1dWlkJztcbmltcG9ydCB7IEFzeW5jTG9jYWxTdG9yYWdlIH0gZnJvbSAnYXN5bmNfaG9va3MnO1xuaW1wb3J0IGh0dHAsIHsgSW5jb21pbmdNZXNzYWdlIH0gZnJvbSAnaHR0cCc7XG5pbXBvcnQgaHR0cHMsIHsgUmVxdWVzdE9wdGlvbnMgfSBmcm9tICdodHRwcyc7XG5cbmV4cG9ydCBjb25zdCBERUZBVUxUX0NPUlJFTEFUSU9OX0hFQURFUiA9ICd4LWNvcnJlbGF0aW9uLWlkJ1xuXG5jb25zdCBsb2NhbFN0b3JhZ2UgPSBuZXcgQXN5bmNMb2NhbFN0b3JhZ2U8c3RyaW5nPigpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBtaWRkbGV3YXJlIGZ1bmN0aW9uIHRvIGV4dHJhY3QgYSBjb3JyZWxhdGlvbiBJRCBmcm9tIGFuIGluY29taW5nIHJlcXVlc3Qgb3IgdG8gY3JlYXRlXG4gKiBhIGNvcnJlbGF0aW9uIElEIGlmIG5vIHN1Y2ggSUQgZXhpc3RzXG4gKiBcbiAqIEBwYXJhbSBoZWFkZXIgLSAgXG4gKiBAcmV0dXJucyBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvcnJlbGF0aW9uTWlkZGxld2FyZShoZWFkZXIgPSBERUZBVUxUX0NPUlJFTEFUSU9OX0hFQURFUikge1xuICAgIHJldHVybiAocmVxdWVzdDogUmVxdWVzdCwgcmVzcG9uc2U6IFJlc3BvbnNlLCBuZXh0OiBOZXh0RnVuY3Rpb24pID0+IHtcbiAgICAgICAgbGV0IGNvcnJlbGF0aW9uSWQgPSByZXF1ZXN0LmhlYWRlcnNbaGVhZGVyXSBhcyBzdHJpbmcgfHwgZ2VuZXJhdGVDb3JyZWxhdGlvbklkKCk7XG4gICAgICAgIHJlc3BvbnNlLnNldEhlYWRlcihoZWFkZXIsIGNvcnJlbGF0aW9uSWQpO1xuICAgICAgICBsb2NhbFN0b3JhZ2UucnVuKGNvcnJlbGF0aW9uSWQsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIG5leHQoKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5jb25zdCBnZW5lcmF0ZUNvcnJlbGF0aW9uSWQgPSAoKSA9PiB1dWlkdjQoKTtcblxuZXhwb3J0IGZ1bmN0aW9uIHdpdGhDb3JyZWxhdGlvbigpIHtcbiAgICByZXR1cm4gbG9jYWxTdG9yYWdlLmdldFN0b3JlKCk7XG59XG5cbi8qKlxuICogQWRkcyBob29rcyB0byBodHRwL2h0dHBzIG1vZHVsZXMgdG8gYXV0b21hdGljYWxseSBhdHRhY2ggYSBjb3JyZWxhdGlvblxuICogSUQgdG8gb3V0Z29pbmcgcmVxdWVzdHNcbiAqL1xuZnVuY3Rpb24gYXR0YWNoQ29ycmVsYXRpb25JREhvb2sobW9kdWxlOiB0eXBlb2YgaHR0cCB8IHR5cGVvZiBodHRwcykge1xuICAgIGxldCBhY3R1YWxDYWxsID0gbW9kdWxlLnJlcXVlc3Q7XG5cbiAgICBmdW5jdGlvbiByZXF1ZXN0KG9wdGlvbnM6IFJlcXVlc3RPcHRpb25zIHwgc3RyaW5nIHwgVVJMLCBjYWxsYmFjaz86IChyZXM6IGh0dHAuSW5jb21pbmdNZXNzYWdlKSA9PiB2b2lkKTogaHR0cC5DbGllbnRSZXF1ZXN0O1xuICAgIGZ1bmN0aW9uIHJlcXVlc3QodXJsOiBzdHJpbmcgfCBVUkwsIG9wdGlvbnM6IFJlcXVlc3RPcHRpb25zLCBjYWxsYmFjaz86IChyZXM6IGh0dHAuSW5jb21pbmdNZXNzYWdlKSA9PiB2b2lkKTogaHR0cC5DbGllbnRSZXF1ZXN0O1xuICAgIGZ1bmN0aW9uIHJlcXVlc3QoXG4gICAgICAgIHVybDogc3RyaW5nIHwgVVJMIHwgUmVxdWVzdE9wdGlvbnMsIFxuICAgICAgICBvcHRpb25zOiBSZXF1ZXN0T3B0aW9ucyB8ICgocmVzOiBodHRwLkluY29taW5nTWVzc2FnZSkgPT4gdm9pZCkgfCB1bmRlZmluZWQsXG4gICAgICAgIGNhbGxiYWNrPzogKHJlczogaHR0cC5JbmNvbWluZ01lc3NhZ2UpID0+IHZvaWQgfCB1bmRlZmluZWRcbiAgICApIHtcbiAgICAgICAgLy8gTG9naWMgYXJvdW5kIHBhaW5mdWwgb3ZlcmxvYWRpbmdcbiAgICAgICAgbGV0IGFjdHVhbFVybDogc3RyaW5nIHwgVVJMO1xuICAgICAgICBsZXQgYWN0dWFsT3B0aW9uczogUmVxdWVzdE9wdGlvbnM7XG4gICAgICAgIGxldCBhY3R1YWxDYWxsYmFjazogKChyZXM6IGh0dHAuSW5jb21pbmdNZXNzYWdlKSA9PiB2b2lkKSB8IHVuZGVmaW5lZDs7XG4gICAgICAgIFxuICAgICAgICBpZiAodXJsIGluc3RhbmNlb2YgVVJMIHx8IHR5cGVvZiB1cmwgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBhY3R1YWxVcmwgPSB1cmw7XG4gICAgICAgICAgICBhY3R1YWxPcHRpb25zID0gb3B0aW9ucyBhcyBSZXF1ZXN0T3B0aW9ucztcbiAgICAgICAgICAgIGFjdHVhbENhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhY3R1YWxPcHRpb25zID0gdXJsO1xuICAgICAgICAgICAgYWN0dWFsQ2FsbGJhY2sgPSBvcHRpb25zIGFzIChyZXM6IGh0dHAuSW5jb21pbmdNZXNzYWdlKSA9PiB2b2lkO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gR2V0IGNvcnJlbGF0aW9uIElEXG4gICAgICAgIGNvbnN0IGNvcnJlbGF0aW9uSWQgPSB3aXRoQ29ycmVsYXRpb24oKTtcblxuICAgICAgICAvLyBDYXNlOiBIZWFkZXJzIG9iamVjdCBpcyBwcmVzZW50IGJ1dCBubyBjb3JyZWxhdGlvbklEIHByb3ZpZGVkXG4gICAgICAgIGlmIChjb3JyZWxhdGlvbklkICYmIGFjdHVhbE9wdGlvbnMuaGVhZGVycyAmJiAhYWN0dWFsT3B0aW9ucy5oZWFkZXJzW0RFRkFVTFRfQ09SUkVMQVRJT05fSEVBREVSXSkge1xuICAgICAgICAgICAgYWN0dWFsT3B0aW9ucy5oZWFkZXJzW0RFRkFVTFRfQ09SUkVMQVRJT05fSEVBREVSXSA9IGNvcnJlbGF0aW9uSWQ7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDYXNlOiBIZWFkZXJzIG9wdGlvbiB3YXMgbm90IHBhc3NlZCwgYWRkIGJvdGggaGVhZGVycyBvcHRpb24gYW5kIGNvcnJlbGF0aW9uSURcbiAgICAgICAgaWYgKGNvcnJlbGF0aW9uSWQgJiYgIWFjdHVhbE9wdGlvbnMuaGVhZGVycykge1xuICAgICAgICAgICAgYWN0dWFsT3B0aW9ucy5oZWFkZXJzID0ge307XG4gICAgICAgICAgICBhY3R1YWxPcHRpb25zLmhlYWRlcnNbREVGQVVMVF9DT1JSRUxBVElPTl9IRUFERVJdID0gY29ycmVsYXRpb25JZDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIERlbGVnYXRlIHRvIHdyYXBwZWQgcmVxdWVzdCBjYWxsXG4gICAgICAgIHJldHVybiBhY3R1YWxDYWxsKGFjdHVhbE9wdGlvbnMsIGFjdHVhbENhbGxiYWNrKVxuICAgIH1cbiAgICBtb2R1bGUucmVxdWVzdCA9IHJlcXVlc3Q7XG59XG5cbmF0dGFjaENvcnJlbGF0aW9uSURIb29rKGh0dHApO1xuYXR0YWNoQ29ycmVsYXRpb25JREhvb2soaHR0cHMpOyJdfQ==